/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Hotel;
import config.BCrypt;
import Admin.AdminPanel;
import Connection.ConnectionDatabase;
import GUI.Loading;
import User.ReservationMenu;
import config.propsLoader;
import java.sql.*;
import javax.swing.JOptionPane;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author Rizky
 */
public class Login extends javax.swing.JFrame {
    private static final Properties PROPS = new Properties();
    private static final String FILE_PATH = "D:\\4 ISA 1\\Project\\Booking_Hotel\\src\\config\\user.properties";
    /**
     * Creates new form Login
     */
    public Login() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        forgotButton = new javax.swing.JButton();
        signupButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Login");
        setBackground(new java.awt.Color(190, 152, 152));
        setPreferredSize(new java.awt.Dimension(590, 420));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Login.png"))); // NOI18N
        jPanel1.add(jLabel8);

        jPanel2.setBackground(new java.awt.Color(190, 152, 152));

        jLabel3.setText("Username/Email");

        usernameTextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        usernameTextField.setOpaque(true);
        usernameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTextFieldActionPerformed(evt);
            }
        });

        jLabel4.setText("Password");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Forgot Password?");

        forgotButton.setText("I'm Forgot");
        forgotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forgotButtonActionPerformed(evt);
            }
        });

        signupButton.setText("Signup");
        signupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Create Account");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(signupButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(jLabel3))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(usernameTextField)
                                .addComponent(jLabel4)
                                .addComponent(passwordField)))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(loginButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(forgotButton, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jLabel6))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jLabel5)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(loginButton)
                .addGap(39, 39, 39)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(forgotButton)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(signupButton)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private int loginAttempts = 0;
    private static final int MAX_LOGIN_ATTEMPTS = 3;
    
    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        long CooldownTimer = cekCooldownTimer();
        if ( CooldownTimer > 0) {
            System.out.println("ADA COOLDOWON");
            // Cooldown masih aktif, lanjutkan dengan proses lain yang sesuai
            JOptionPane.showMessageDialog(null, "Cooldown Aktif. Sisa waktu: " + CooldownTimer + " menit", "Failed Login", JOptionPane.ERROR_MESSAGE);
        } else {
            // Connect into database and fetching user data
            ConnectionDatabase database = new ConnectionDatabase();
            Connection conn = database.connect(); // Memanggil metode connect untuk membuat koneksi ke database

            // Menampilkan Loading UI
            Loading loadingScreen = new Loading();
            loadingScreen.setVisible(true);

            // Cek Koneksi
            if (conn != null){ // Koneksi Aman
                // Masukan Input User
                String usernameEmail = usernameTextField.getText(); // Mendapatkan username/email dari field teks
                String password = new String(passwordField.getPassword()); // Mendapatkan password dari field kata sandi

                // Validasi Login
                if (isLoginValid(conn, usernameEmail, password)) { // Jika login berhasil
                    // Menyembunyikan frame login saat ini
                    this.setVisible(false);
                } else {
                    loginAttempts++;
                    JOptionPane.showMessageDialog(null, "Belum berhasil Login. Percobaan login ke-" + loginAttempts);
                }
            } else { // Koneksi GAGAL
                // Logika untuk menangani kasus koneksi gagal
                JOptionPane.showMessageDialog(null, "Gagal Terhubung, Periksa Koneksi Anda");
            }
            
            if (conn != null) {
                try {
                    conn.close(); // Tutup koneksi setelah selesai menggunakan
                } catch (SQLException ex) {
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            loadingScreen.dispose();
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    // Metode untuk memverifikasi password
    private boolean verifyPassword(String password, String storedPassword) {
        // Gunakan BCrypt.checkpw() untuk memverifikasi password
        return BCrypt.checkpw(password, storedPassword);
    }
    
    // Metode untuk Validasi Login
    private boolean isLoginValid(Connection conn, String usernameEmail, String password) {
        try {
            // Cek apakah pengguna adalah admin
            if (isAdmin(conn, usernameEmail, password)) {
                new AdminPanel().setVisible(true);
                return true; // Pengguna adalah admin
            } else { // Pengguna bukan admin, lanjutkan ke pengecekan akun pengguna biasa
                // Query mencari akun pengguna
                String userQuery = "SELECT * FROM user WHERE (username = ? OR email = ?) LIMIT 1";
                try (PreparedStatement userPstmt = conn.prepareStatement(userQuery)) {
                    userPstmt.setString(1, usernameEmail);
                    userPstmt.setString(2, usernameEmail);
                    try (ResultSet userRs = userPstmt.executeQuery()) {
                        if (userRs.next()) { // Akun pengguna terdaftar
                            // Cek Password
                            String storedPassword = userRs.getString("password");
                            if (verifyPassword(password, storedPassword)) {
                                return isAccountActive(conn, usernameEmail); // Cek Akun aktif untuk pengguna biasa
                            } else {
                                JOptionPane.showMessageDialog(null, "Wrong Password");
                                return false;
                            }
                        } else {
                            return false; // Username/email pengguna tidak ditemukan
                        }
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace(); // Log pesan kesalahan
            return false;
        }
    }

    // Metode untuk memeriksa apakah pengguna adalah admin
    private boolean isAdmin(Connection conn, String usernameEmail, String password) throws SQLException {
        // Query mencari admin
        String adminQuery = "SELECT * FROM admin WHERE adminName = ? LIMIT 1";
        try (PreparedStatement adminPstmt = conn.prepareStatement(adminQuery)) {
            adminPstmt.setString(1, usernameEmail);
            try (ResultSet adminRs = adminPstmt.executeQuery()) {
                if (adminRs.next()) {
                    String storedPassword = adminRs.getString("adminPass");
                    if (verifyPassword(password, storedPassword)) {
                        return true; // Pengguna adalah admin
                    }
                }
            }
        }
        return false; // Admin tidak ditemukan atau password tidak cocok
    }
    
    // Metode Cek Akun Aktif
    private boolean isAccountActive(Connection conn, String usernameEmail){
        String accountstate = "ACTIVE";
        String query = "SELECT * FROM user WHERE (username = ? OR email = ?) AND accountstate = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, usernameEmail);
            pstmt.setString(2, usernameEmail);
            pstmt.setString(3, accountstate);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()){
                
                // Simpan Info User di Device
                int userID = rs.getInt("userid");
                String saveUserID = String.valueOf(userID);
                String saveUsername = rs.getString("username");
                String saveEmail = rs.getString("email");
                String saveFullName = rs.getString("fullname");
                
                // Save Login Info
                propsLoader.saveUser(saveUserID, saveUsername, saveEmail, saveFullName);
                
                // Membuat objek Reservation Menu dan Menampilkan
                new ReservationMenu().setVisible(true);
                return true; // Jika terdapat data akun aktif return true
            } else {
                JOptionPane.showMessageDialog(this, "Akun Tidak Aktif", "Failed Login", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } catch (SQLException ex) {
            ex.printStackTrace(); // Log pesan kesalahan
            return false;
        }
    }
    
    // Metode untuk mendapatkan tanggal dan waktu saat ini dalam format yang diinginkan
    private static String getCurrentDateTime() {
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        return now.format(formatter);
    }
    
    // Metode untuk menyimpan Cooldown Login Timer
    public void setCooldownTimer() {
        try {
            String loginTime = getCurrentDateTime();
            PROPS.setProperty("User_FailedLoginTimer", loginTime);
            PROPS.store(new FileOutputStream(FILE_PATH), null);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Gagal Menyetel Cooldown Timer", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private long cekCooldownTimer() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        String failedLoginTime = PROPS.getProperty("User_FailedLoginTimer");
        if (failedLoginTime != null) {
            try {
                Date date = sdf.parse(failedLoginTime);
                Date now = new Date();
                long diffInMillies = now.getTime() - date.getTime();
                long diffInMinutes = diffInMillies / (60 * 1000);

                if (diffInMinutes > 5) {
                    PROPS.remove("User_FailedLoginTimer");
                    loginAttempts = 0;
                    System.out.println("Berhasil Menghapus Cooldown");
                    return 0; // Tidak ada cooldown
                } else {
                    long remainingTime = 5 - diffInMinutes;
                    return remainingTime; // Kembalikan sisa waktu cooldown
                }
            } catch (ParseException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Gagal Memeriksa Cooldown Timer", "Error", JOptionPane.ERROR_MESSAGE);
                return -1; // Gunakan nilai yang tidak valid untuk menunjukkan kesalahan
            }
        } else {
            if (loginAttempts >= MAX_LOGIN_ATTEMPTS) {
                setCooldownTimer(); // atur cooldown timer baru
                return 5;
            } else {
                System.out.println("Cooldown is clear");
                return 0; // Tidak ada cooldown
            }
        }
    }
    
    // Membuka Form Signup
    private void signupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signupButtonActionPerformed
        // TODO add your handling code here:
        Signup signupFrame = new Signup();
        signupFrame.setVisible(true);
        
        this.setVisible(false);
    }//GEN-LAST:event_signupButtonActionPerformed

    // Membuka Form Lupa Password
    private void forgotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forgotButtonActionPerformed
        // TODO add your handling code here:
        Forgot forgotFrame = new Forgot();
        forgotFrame.setVisible(true);
        
        this.setVisible(false);
    }//GEN-LAST:event_forgotButtonActionPerformed

    private void usernameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton forgotButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton loginButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JButton signupButton;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables

}
