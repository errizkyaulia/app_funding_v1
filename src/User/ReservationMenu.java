/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package User;

import Connection.ConnectionDatabase;
import Connection.ConnectionEmail;
import Hotel.Login;
import Hotel.Signup;
import static Hotel.Signup.generateToken;
import config.propsLoader;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Rizky
 */
public class ReservationMenu extends javax.swing.JFrame {

    private static final Properties PROPS = new Properties();

        static {
            try {
                PROPS.load(Signup.class.getClassLoader().getResourceAsStream("Config/application.properties"));
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        
    /**
     * Creates new form Reservation
     */
    public ReservationMenu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        TabPanel = new javax.swing.JTabbedPane();
        FindRoom = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cekInDateChooser = new com.toedter.calendar.JDateChooser();
        cekOutDateChooser = new com.toedter.calendar.JDateChooser();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        availableRoomsTable = new javax.swing.JTable();
        nightsLabel = new javax.swing.JLabel();
        totalNightsLabel = new javax.swing.JLabel();
        RoomCart = new javax.swing.JPanel();
        confirmBookingButton = new javax.swing.JButton();
        chooseOtherRoomButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartRoomTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        checkInDateLabel = new javax.swing.JLabel();
        checkOutDateLabel = new javax.swing.JLabel();
        totalNightsConfirmLabel = new javax.swing.JLabel();
        totalPriceLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField();
        MyReservation = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        myReservationTable = new javax.swing.JTable();
        ReservationEditor = new javax.swing.JPanel();
        cancleReservationButton = new javax.swing.JButton();
        reshceduleButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        reservationEditorTable = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        fullnameCancleTextField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        emailCancleTextField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        roomEditorTable = new javax.swing.JTable();
        otherReservationButton = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        reservationIDTextField = new javax.swing.JTextField();
        History = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        historyTable = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        userHistoryLabel = new javax.swing.JLabel();
        Profile = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        updateProfileButton = new javax.swing.JButton();
        resetPasswordButton = new javax.swing.JButton();
        fullnameProfileTextField = new javax.swing.JTextField();
        usernameProfileTextField = new javax.swing.JTextField();
        emailProfileTextField = new javax.swing.JTextField();
        phonenumberProfileTextField = new javax.swing.JTextField();
        requestDeleteAccountButton = new javax.swing.JButton();
        Menu = new javax.swing.JPanel();
        findRoomButton = new javax.swing.JButton();
        myReservationButton = new javax.swing.JButton();
        historyButton = new javax.swing.JButton();
        profileButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Reservation");
        setBackground(new java.awt.Color(190, 152, 152));
        setMaximizedBounds(getMaximizedBounds());

        TabPanel.setBackground(new java.awt.Color(244, 164, 96));
        TabPanel.setPreferredSize(new java.awt.Dimension(700, 405));

        FindRoom.setBackground(new java.awt.Color(244, 164, 96));

        jLabel1.setText("Check In Date");

        jLabel2.setText("Check Out Date");

        searchButton.setText("Search Room");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(204, 255, 255));

        availableRoomsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        availableRoomsTable.setColumnSelectionAllowed(true);
        availableRoomsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(availableRoomsTable);
        availableRoomsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        nightsLabel.setText("Total Night(s) =");

        totalNightsLabel.setText("0");

        javax.swing.GroupLayout FindRoomLayout = new javax.swing.GroupLayout(FindRoom);
        FindRoom.setLayout(FindRoomLayout);
        FindRoomLayout.setHorizontalGroup(
            FindRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FindRoomLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cekInDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(cekOutDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(nightsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalNightsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchButton)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
        );
        FindRoomLayout.setVerticalGroup(
            FindRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FindRoomLayout.createSequentialGroup()
                .addGroup(FindRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FindRoomLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(FindRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchButton)
                            .addComponent(nightsLabel)
                            .addComponent(totalNightsLabel))
                        .addGap(9, 9, 9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FindRoomLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(FindRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cekInDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(cekOutDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE))
        );

        TabPanel.addTab("Find Room", FindRoom);

        RoomCart.setBackground(new java.awt.Color(244, 164, 96));

        confirmBookingButton.setText("Confirm Booking");
        confirmBookingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBookingButtonActionPerformed(evt);
            }
        });

        chooseOtherRoomButton.setText("Choose Other Room");
        chooseOtherRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseOtherRoomButtonActionPerformed(evt);
            }
        });

        cartRoomTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room Number", "Room Type", "Total Bed", "Max People", "Room Price per Nigth"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(cartRoomTable);
        if (cartRoomTable.getColumnModel().getColumnCount() > 0) {
            cartRoomTable.getColumnModel().getColumn(0).setResizable(false);
            cartRoomTable.getColumnModel().getColumn(1).setResizable(false);
            cartRoomTable.getColumnModel().getColumn(2).setResizable(false);
            cartRoomTable.getColumnModel().getColumn(3).setResizable(false);
            cartRoomTable.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel3.setText("This is the Room You choose:");

        jLabel4.setText("Check In Date:");

        jLabel5.setText("Check Out Date:");

        jLabel6.setText("Total Nights:");

        jLabel7.setText("Total Prices:");

        checkInDateLabel.setText("Eror getting CheckIn data");

        checkOutDateLabel.setText("Eror getting CheckOut data");

        totalNightsConfirmLabel.setText("Eror getting TotalNights data");

        totalPriceLabel.setText("Eror getting TotalPrices data");

        jLabel8.setText("Your Name:");

        jLabel9.setText("Email:");

        usernameTextField.setEditable(false);

        emailTextField.setEditable(false);

        javax.swing.GroupLayout RoomCartLayout = new javax.swing.GroupLayout(RoomCart);
        RoomCart.setLayout(RoomCartLayout);
        RoomCartLayout.setHorizontalGroup(
            RoomCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RoomCartLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RoomCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RoomCartLayout.createSequentialGroup()
                        .addGroup(RoomCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                            .addGroup(RoomCartLayout.createSequentialGroup()
                                .addComponent(chooseOtherRoomButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(confirmBookingButton))
                            .addGroup(RoomCartLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(RoomCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(RoomCartLayout.createSequentialGroup()
                                        .addGroup(RoomCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(RoomCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(usernameTextField)
                                            .addComponent(emailTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RoomCartLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(RoomCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(RoomCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(checkInDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(checkOutDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                        .addGap(35, 35, 35)
                        .addGroup(RoomCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(RoomCartLayout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                            .addGroup(RoomCartLayout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalNightsConfirmLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(16, 16, 16))))
        );
        RoomCartLayout.setVerticalGroup(
            RoomCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RoomCartLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(RoomCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(RoomCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(RoomCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(checkInDateLabel)
                    .addComponent(totalNightsConfirmLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RoomCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(checkOutDateLabel)
                    .addComponent(totalPriceLabel))
                .addGap(35, 35, 35)
                .addGroup(RoomCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseOtherRoomButton)
                    .addComponent(confirmBookingButton))
                .addGap(47, 47, 47))
        );

        TabPanel.addTab("Reservation Summary", RoomCart);

        MyReservation.setBackground(new java.awt.Color(244, 164, 96));

        jLabel10.setText("Here is the Room list that you have Booked");

        myReservationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(myReservationTable);

        javax.swing.GroupLayout MyReservationLayout = new javax.swing.GroupLayout(MyReservation);
        MyReservation.setLayout(MyReservationLayout);
        MyReservationLayout.setHorizontalGroup(
            MyReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MyReservationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MyReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                    .addGroup(MyReservationLayout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        MyReservationLayout.setVerticalGroup(
            MyReservationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MyReservationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                .addContainerGap())
        );

        TabPanel.addTab("My Reservation", MyReservation);

        ReservationEditor.setBackground(new java.awt.Color(244, 164, 96));

        cancleReservationButton.setText("Cancle Book");
        cancleReservationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancleReservationButtonActionPerformed(evt);
            }
        });

        reshceduleButton.setText("Reschedule");
        reshceduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reshceduleButtonActionPerformed(evt);
            }
        });

        reservationEditorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(reservationEditorTable);

        jLabel16.setText("Full Name:");

        fullnameCancleTextField.setEditable(false);

        jLabel17.setText("Email:");

        emailCancleTextField.setEditable(false);

        jLabel18.setText("Reservation Details:");

        jLabel19.setText("Room Details:");

        roomEditorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(roomEditorTable);

        otherReservationButton.setText("Choose Other Reservation");
        otherReservationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otherReservationButtonActionPerformed(evt);
            }
        });

        jLabel20.setText("Reservation ID:");

        reservationIDTextField.setEditable(false);

        javax.swing.GroupLayout ReservationEditorLayout = new javax.swing.GroupLayout(ReservationEditor);
        ReservationEditor.setLayout(ReservationEditorLayout);
        ReservationEditorLayout.setHorizontalGroup(
            ReservationEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReservationEditorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ReservationEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane6)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ReservationEditorLayout.createSequentialGroup()
                        .addComponent(otherReservationButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancleReservationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(reshceduleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ReservationEditorLayout.createSequentialGroup()
                        .addGroup(ReservationEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ReservationEditorLayout.createSequentialGroup()
                                .addGroup(ReservationEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ReservationEditorLayout.createSequentialGroup()
                                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(emailCancleTextField))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ReservationEditorLayout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addGap(18, 18, 18)
                                        .addComponent(fullnameCancleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(64, 64, 64)
                                .addComponent(jLabel20)
                                .addGap(18, 18, 18)
                                .addComponent(reservationIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ReservationEditorLayout.setVerticalGroup(
            ReservationEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReservationEditorLayout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(ReservationEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(fullnameCancleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(reservationIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(ReservationEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(emailCancleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(ReservationEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reshceduleButton)
                    .addComponent(cancleReservationButton)
                    .addComponent(otherReservationButton))
                .addGap(51, 51, 51))
        );

        TabPanel.addTab("Reservation Editor", ReservationEditor);

        History.setBackground(new java.awt.Color(244, 164, 96));

        historyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(historyTable);

        jLabel15.setText("Your Booking History:");

        javax.swing.GroupLayout HistoryLayout = new javax.swing.GroupLayout(History);
        History.setLayout(HistoryLayout);
        HistoryLayout.setHorizontalGroup(
            HistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HistoryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                    .addGroup(HistoryLayout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userHistoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        HistoryLayout.setVerticalGroup(
            HistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HistoryLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(HistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(userHistoryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        TabPanel.addTab("History", History);

        Profile.setBackground(new java.awt.Color(244, 164, 96));

        jLabel11.setText("Full Name:");

        jLabel12.setText("Username:");

        jLabel13.setText("Email:");

        jLabel14.setText("Phone Number:");

        updateProfileButton.setText("Update");
        updateProfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateProfileButtonActionPerformed(evt);
            }
        });

        resetPasswordButton.setText("Reset Password");
        resetPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetPasswordButtonActionPerformed(evt);
            }
        });

        requestDeleteAccountButton.setText("Request Account Delete");
        requestDeleteAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestDeleteAccountButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ProfileLayout = new javax.swing.GroupLayout(Profile);
        Profile.setLayout(ProfileLayout);
        ProfileLayout.setHorizontalGroup(
            ProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProfileLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(ProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usernameProfileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailProfileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(fullnameProfileTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(ProfileLayout.createSequentialGroup()
                            .addGroup(ProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(updateProfileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(phonenumberProfileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(146, 146, 146)
                            .addGroup(ProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(requestDeleteAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(resetPasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(93, Short.MAX_VALUE))
        );
        ProfileLayout.setVerticalGroup(
            ProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProfileLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(ProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fullnameProfileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(ProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameProfileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(ProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailProfileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addGroup(ProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phonenumberProfileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(resetPasswordButton))
                .addGap(18, 18, 18)
                .addGroup(ProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateProfileButton)
                    .addComponent(requestDeleteAccountButton))
                .addContainerGap(94, Short.MAX_VALUE))
        );

        TabPanel.addTab("Profile", Profile);

        Menu.setBackground(new java.awt.Color(210, 105, 30));
        Menu.setPreferredSize(new java.awt.Dimension(200, 400));

        findRoomButton.setText("Find Room");
        findRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findRoomButtonActionPerformed(evt);
            }
        });

        myReservationButton.setText("My Reservation");
        myReservationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myReservationButtonActionPerformed(evt);
            }
        });

        historyButton.setText("History");
        historyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButtonActionPerformed(evt);
            }
        });

        profileButton.setText("Profile");
        profileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileButtonActionPerformed(evt);
            }
        });

        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MenuLayout = new javax.swing.GroupLayout(Menu);
        Menu.setLayout(MenuLayout);
        MenuLayout.setHorizontalGroup(
            MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(findRoomButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(myReservationButton, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addComponent(historyButton, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addComponent(profileButton, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addComponent(logoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        MenuLayout.setVerticalGroup(
            MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(findRoomButton)
                .addGap(30, 30, 30)
                .addComponent(myReservationButton)
                .addGap(34, 34, 34)
                .addComponent(historyButton)
                .addGap(38, 38, 38)
                .addComponent(profileButton)
                .addGap(41, 41, 41)
                .addComponent(logoutButton)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Menu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(TabPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Menu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(TabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        // Reset Table
        DefaultTableModel model = (DefaultTableModel) availableRoomsTable.getModel();
        model.setRowCount(0); // Menghapus semua baris dalam tabel
        
        totalNightsLabel.setText("0");
        
        // Mendapatkan tanggal hari ini
        Date today = new Date();
        Date cekIn = cekInDateChooser.getDate();
        Date cekOut = cekOutDateChooser.getDate();
        
        // Pastikan User Memilih Tanggal dengan benar
        if (cekIn != null && cekOut != null) {
            // Pengecekan apakah tanggal check-in tidak lebih kecil dari tanggal hari ini
            if (cekIn.before(today)) {
                JOptionPane.showMessageDialog(null, "Maaf, Anda tidak dapat memilih tanggal kemarin untuk check-in.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
            } else {
                // Pengecekan apakah tanggal check-out lebih besar dari tanggal check-in
                if (cekOut.after(cekIn)) {
                    // Pastikan tanggal check-in dan check-out tidak sama
                    if (cekOut.equals(cekIn)) {
                        JOptionPane.showMessageDialog(null, "Maaf, tanggal check-out harus berbeda dengan tanggal check-in.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
                    } else {
                        // Penghitungan total hari
                        long totalHari = ChronoUnit.DAYS.between(cekIn.toInstant().atZone(ZoneId.systemDefault()).toLocalDate(), 
                                                                cekOut.toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
                        // Ubah total hari menjadi String
                        String totalHariString = String.valueOf(totalHari);

                        // Set teks label dengan total hari
                        totalNightsLabel.setText(totalHariString);
                        totalNightsConfirmLabel.setText(totalHariString);
                        
                        SimpleDateFormat dateFormat = new SimpleDateFormat("EEEE, dd MMMM yyyy");;
                        String ckInDate = dateFormat.format(cekIn);
                        String ckOutDate = dateFormat.format(cekOut);
                        // Set Tanggal CekIn dan CekOut di Next Tab
                        checkInDateLabel.setText(ckInDate);
                        checkOutDateLabel.setText(ckOutDate);
                        
                        if (totalHari != 0){ // Tidak bisa memesan dengan tanggal cekout yang sama (minimal 1 hari)
                            // Connect into database and fetching user data
                            ConnectionDatabase database = new ConnectionDatabase();
                            Connection conn = database.connect(); // Memanggil metode connect untuk membuat koneksi ke database

                            // Menampilkan kamar yang tersedia dan memberi tahu pengguna
                            showAvailableRooms(conn, cekIn, cekOut);
                        } else {
                            JOptionPane.showMessageDialog(null, "Maaf, tanggal check-out harus setelah tanggal check-in.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Maaf, tanggal check-out harus setelah tanggal check-in.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Maaf, pastikan Anda telah memilih tanggal check-in dan check-out.", "Kesalahan", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void findRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findRoomButtonActionPerformed
        // TODO add your handling code here:
        // Reset Table
        DefaultTableModel model = (DefaultTableModel) availableRoomsTable.getModel();
        model.setRowCount(0); // Menghapus semua baris dalam tabel
        TabPanel.setSelectedIndex(0);
    }//GEN-LAST:event_findRoomButtonActionPerformed

    private void chooseOtherRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseOtherRoomButtonActionPerformed
        // TODO add your handling code here:
        TabPanel.setSelectedIndex(0);
    }//GEN-LAST:event_chooseOtherRoomButtonActionPerformed

    private void myReservationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myReservationButtonActionPerformed
        // TODO add your handling code here:
        // Reset Table
        DefaultTableModel model = (DefaultTableModel) availableRoomsTable.getModel();
        model.setRowCount(0); // Menghapus semua baris dalam tabel
        
        reservationEditor();
        TabPanel.setSelectedIndex(2);
    }//GEN-LAST:event_myReservationButtonActionPerformed

    private void historyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButtonActionPerformed
        // TODO add your handling code here:
        // Connect into database and fetching user data
        ConnectionDatabase database = new ConnectionDatabase();
        Connection conn = database.connect(); // Memanggil metode connect untuk membuat koneksi ke database

        try {
            // Query untuk mengambil informasi kamar
            String query = "SELECT * FROM reservation r JOIN user u ON r.userid = u.userid WHERE r.userid = ? AND reservation_status != ?";

            // Persiapkan statement
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, new propsLoader().loadUserID());
            statement.setString(2, "Booked");

            // Eksekusi kueri
            ResultSet rs = statement.executeQuery();

            // Buat model tabel
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("ID");
            model.addColumn("Room");
            model.addColumn("Check In");
            model.addColumn("Check Out");
            model.addColumn("Total Nights");
            model.addColumn("Bills");
            model.addColumn("Bills Status");
            model.addColumn("Book Status");

            String fullname = ""; // Menyimpan nama pengguna
            // Memproses hasil query untuk menambahkan baris ke dalam model tabel
            while (rs.next()) {
                String reserID = rs.getString("reservation_id");
                String roomNum = rs.getString("room_id");
                String ckIn = rs.getString("check_in");
                String ckOut = rs.getString("check_out");
                String tNights = rs.getString("totalNights");
                String bills = rs.getString("reservation_bills");
                String payStatus = rs.getString("bill_status");
                String status = rs.getString("reservation_status");
                
                // Tambahkan baris ke dalam model tabel
                model.addRow(new Object[]{reserID, roomNum, ckIn, ckOut, tNights, bills, payStatus, status});
                // Simpan nama pengguna
                fullname = rs.getString("fullname");
            }

            // Set nama pengguna ke label
            userHistoryLabel.setText(fullname);
            // Set model tabel
            historyTable.setModel(model);

            // Tutup statement dan result set
            statement.close();
            rs.close();
        } catch (SQLException e) {
            e.printStackTrace();
            // Tangani pengecualian sesuai kebutuhan Anda
            JOptionPane.showMessageDialog(null, "Gagal Memuat Kamar", "Error", JOptionPane.ERROR_MESSAGE);
        }finally {
            // Menutup koneksi setelah selesai digunakan
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                // Tangani kesalahan penutupan koneksi
                e.printStackTrace();
            }
        }
        TabPanel.setSelectedIndex(4);
    }//GEN-LAST:event_historyButtonActionPerformed

    private void profileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileButtonActionPerformed
        // TODO add your handling code here:
        // Reset Table
        DefaultTableModel model = (DefaultTableModel) availableRoomsTable.getModel();
        model.setRowCount(0); // Menghapus semua baris dalam tabel
        // Connect into database and fetching user data
        ConnectionDatabase database = new ConnectionDatabase();
        Connection conn = database.connect(); // Memanggil metode connect untuk membuat koneksi ke database
        
        String ID = new propsLoader().loadUserID();
        try {
            // Query untuk check Out
            String query = "SELECT * FROM user WHERE userid = ?";
            // Persiapkan statement
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, ID);

            // Eksekusi kueri
            ResultSet rs = statement.executeQuery();

            // Periksa apakah ResultSet mengandung baris
            if (rs.next()) {
                String FullName = rs.getString("fullname");
                String userName = rs.getString("username");
                String email = rs.getString("email");
                String phoneNumber = rs.getString("phonenumber");
                
                fullnameProfileTextField.setText(FullName);
                usernameProfileTextField.setText(userName);
                emailProfileTextField.setText(email);
                phonenumberProfileTextField.setText(phoneNumber);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Tangani pengecualian sesuai kebutuhan Anda
            JOptionPane.showMessageDialog(null, "Gagal Mengecek Check Out", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            // Menutup koneksi setelah selesai digunakan
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                // Tangani kesalahan penutupan koneksi
                e.printStackTrace();
            }
        }
        
        TabPanel.setSelectedIndex(5);
    }//GEN-LAST:event_profileButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        // TODO add your handling code here:
        new Logout().removeUser();
        new Login().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void confirmBookingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBookingButtonActionPerformed
        // TODO add your handling code here:
        // Connect into database and fetching user data
        ConnectionDatabase database = new ConnectionDatabase();
        Connection conn = database.connect(); // Memanggil metode connect untuk membuat koneksi ke database
        
        // Ambil nomor kamar dari tabel dan konversi ke integer
        int roomNumber = Integer.parseInt((String) cartRoomTable.getValueAt(0, 0));
        int userID = Integer.parseInt(new propsLoader().loadUserID()); // Mengambil data UserID yang tersimpan
        String FullName = new propsLoader().loadFullName();
        
        // Ambil tanggal cekin dan cekout dari date picker (java.util.Date)
        Date cekInUtilDate = cekInDateChooser.getDate();
        Date cekOutUtilDate = cekOutDateChooser.getDate();
        java.sql.Date cekInDate = new java.sql.Date(cekInUtilDate.getTime());// Konversi java.util.Date ke java.sql.Date
        java.sql.Date cekOutDate = new java.sql.Date(cekOutUtilDate.getTime());
        
        int totalNights = Integer.parseInt(totalNightsLabel.getText());
        
        BigDecimal totalPrices = new BigDecimal(totalPriceLabel.getText());
        
        String billStatus = "Pending Payment";
        
        String reservationStatus = "Booked";
        // Mendapatkan tanggal hari ini
        java.util.Date today = new java.util.Date();
        String reservationNotes = "Booked on: " + today;
        
        String recap = "Nomor Kamar: " + roomNumber + "\n" +
                        "Full Name: " + FullName + "\n" +
                        "Tanggal Check-in: " + cekInDate + "\n" +
                        "Tanggal Check-out: " + cekOutDate + "\n" +
                        "Total Malam: " + totalNights + "\n" +
                        "Total Harga: " + totalPrices + "\n" +
                        "Status Tagihan: " + billStatus + "\n";
        
        // Membuat pesan konfirmasi
        String confirmationMessage = recap + "Apakah Anda yakin ingin melakukan pemesanan dengan detail ini?";

        // Tampilkan pesan konfirmasi menggunakan JOptionPane
        int option = JOptionPane.showConfirmDialog(this, confirmationMessage, "Konfirmasi Pemesanan", JOptionPane.YES_NO_OPTION);

        // Cek apakah pengguna menekan tombol "Yes"
        if (option == JOptionPane.YES_OPTION) {
            try {
                // Membuat PreparedStatement
                String query = "INSERT INTO reservation (room_id, userid, check_in, check_out, totalNights, reservation_bills, bill_status, reservation_status, reservation_notes) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement statement = conn.prepareStatement(query);

                // Mengatur nilai parameter
                statement.setInt(1, roomNumber);
                statement.setInt(2, userID);
                statement.setDate(3, cekInDate);
                statement.setDate(4, cekOutDate);
                statement.setInt(5, totalNights);
                statement.setBigDecimal(6, totalPrices);
                statement.setString(7, billStatus);
                statement.setString(8, reservationStatus);
                statement.setString(9, reservationNotes);

                // Menjalankan query
                int rowsInserted = statement.executeUpdate();

                if (rowsInserted > 0) {
                    JOptionPane.showMessageDialog(this, "Pemesanan berhasil dilakukan.", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                    // Kirim email Konfirmasi Pesanan
                    ConnectionEmail emailSender = new ConnectionEmail();
                    String emailSubject = "Booking Details";
                    String emailBody = recap;
                    // emailSender.sendEmail(propsLoader.loadEmail(), emailSubject, emailBody, null);
                } else {
                    JOptionPane.showMessageDialog(this, "Gagal menyimpan data reservasi.", "Gagal", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menyimpan data reservasi: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                // Menutup koneksi setelah selesai digunakan
                try {
                    if (conn != null) {
                        conn.close();
                    }
                } catch (SQLException e) {
                    // Tangani kesalahan penutupan koneksi
                    e.printStackTrace();
                }
            }
        } else {
            // Pengguna membatalkan pemesanan
            JOptionPane.showMessageDialog(this, "Pemesanan dibatalkan.", "Batalkan", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_confirmBookingButtonActionPerformed

    private void cancleReservationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancleReservationButtonActionPerformed
        // TODO add your handling code here:
        String ID = (String) reservationIDTextField.getText();
        // Connect into database and fetching user data
        ConnectionDatabase database = new ConnectionDatabase();
        Connection conn = database.connect(); // Memanggil metode connect untuk membuat koneksi ke database
        
        if (cancleReservation(conn, ID)){
            // Kirim email Konfirmasi Pesanan
            ConnectionEmail emailSender = new ConnectionEmail();
            String emailSubject = "Cancel Booking";
            String emailBody = "Berhasil Membatalkan Pesanan dengan ID " + ID;
            //  emailSender.sendEmail(propsLoader.loadEmail(), emailSubject, emailBody, null);
            TabPanel.setSelectedIndex(4);
        }
    }//GEN-LAST:event_cancleReservationButtonActionPerformed

    private void resetPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetPasswordButtonActionPerformed
        // TODO add your handling code here:
        new ResetPassword().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_resetPasswordButtonActionPerformed

    private void reshceduleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reshceduleButtonActionPerformed
        // TODO add your handling code here:
        String ID = (String) reservationIDTextField.getText();
        // Connect into database and fetching user data
        ConnectionDatabase database = new ConnectionDatabase();
        Connection conn = database.connect(); // Memanggil metode connect untuk membuat koneksi ke database
        
        JOptionPane.showMessageDialog(null, "Anda akan membatalkan Reservasi ini terlebih dahulu kemudian pilih kamar lain yang tersedia", "Information", JOptionPane.INFORMATION_MESSAGE);
        if (cancleReservation(conn, ID)){
            TabPanel.setSelectedIndex(0);
        }
    }//GEN-LAST:event_reshceduleButtonActionPerformed

    private void otherReservationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otherReservationButtonActionPerformed
        // TODO add your handling code here:
        TabPanel.setSelectedIndex(2);
    }//GEN-LAST:event_otherReservationButtonActionPerformed

    private void updateProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateProfileButtonActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        ConnectionDatabase database = new ConnectionDatabase();
        Connection conn = database.connect(); // Memanggil metode connect untuk membuat koneksi ke database

        // Tampilkan dialog konfirmasi
        int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want to update your profile? You will be logout to confirm your update through mail.", "Confirm Update", JOptionPane.YES_NO_OPTION);

        // Periksa pilihan pengguna
        if (choice == JOptionPane.YES_OPTION) {
            if (changeProfile(conn)){
                new Logout().removeUser();
                new Login().setVisible(true);
                this.setVisible(false);
            }
        }  
    }//GEN-LAST:event_updateProfileButtonActionPerformed

    private void requestDeleteAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestDeleteAccountButtonActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_requestDeleteAccountButtonActionPerformed

    private boolean changeProfile(Connection conn) {
        String fullname = fullnameProfileTextField.getText();
        String username = usernameProfileTextField.getText();
        String email = emailProfileTextField.getText();
        String phoneNum = phonenumberProfileTextField.getText();

        try {
            // Validasi input
            if (username.length() < 3) {
                JOptionPane.showMessageDialog(this, "Username must be at least 3 characters long.", "Invalid Username", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            if (!isValidEmail(email)) {
                JOptionPane.showMessageDialog(this, "Invalid email format.", "Invalid Email", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            if (!phoneNum.matches("\\d+")) {
                JOptionPane.showMessageDialog(this, "Phone Number must be numeric.", "Invalid Phone Number", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            // Cek apakah data sudah ada
            if (cekData(conn, username, email, phoneNum)) {
                JOptionPane.showMessageDialog(this, "Username, email, or phone number is already in use.", "Duplicate Data", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            // Generate token
            String token = generateToken(conn);

            String accountstate = "Pending Activation";
            String query = "UPDATE user SET username = ?, fullname = ?, email = ?, phonenumber = ?, accountstate = ?, token = ? WHERE userid = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(query)) {
                pstmt.setString(1, username);
                pstmt.setString(2, fullname);
                pstmt.setString(3, email);
                pstmt.setString(4, phoneNum);
                pstmt.setString(5, accountstate);
                pstmt.setString(6, token);
                pstmt.setString(7, propsLoader.loadUserID());

                if (pstmt.executeUpdate() > 0) {
                    // Kirim email verifikasi
                    ConnectionEmail emailSender = new ConnectionEmail();
                    String web_url = PROPS.getProperty("WEB_HOST");
                    String emailSubject = "Account Verification";
                    String emailBody = "Click the following link to verify your profile update: " + web_url + "verify.php?token=" + token;
                    return emailSender.sendEmail(email, emailSubject, emailBody, null);
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Failed to update profile.", "Profile Update Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An unexpected error occurred.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return false;
    }
    
    // Metode Cek Database
    private boolean cekData(Connection conn, String username, String email, String phonenumber) {
        String query = "SELECT * FROM user WHERE (username = ? OR email = ? OR phonenumber = ?) AND userid <> ?";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, username);
            pstmt.setString(2, email);
            pstmt.setString(3, phonenumber);
            pstmt.setString(4, propsLoader.loadUserID()); // Mengecualikan pengguna saat ini dari hasil query
            try (ResultSet rs = pstmt.executeQuery()) {
                return rs.next(); // Jika ResultSet memiliki hasil, artinya data sudah ada
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while checking data.", "Database Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
    }
    
    // Metode Cek Email is Valid
    private boolean isValidEmail(String email) {
        // Definisikan pola regex untuk format email
        String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";

        Pattern pattern = Pattern.compile(emailRegex);
        Matcher matcher = pattern.matcher(email);

        // Return true jika format email sesuai
        return matcher.matches();
    }
    
    // Menampilkan Kamar
    private void showAvailableRooms(Connection conn, Date checkInDate, Date checkOutDate) {
        // Query untuk mengambil informasi kamar yang tersedia pada rentang tanggal tertentu
        String query = "SELECT * FROM room WHERE room_id NOT IN (SELECT room_id FROM reservation WHERE (? <= check_out AND ? >= check_in) AND reservation_status = ?) AND room_status = ?";
        try {
            // Persiapkan statement
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setDate(1, new java.sql.Date(checkInDate.getTime())); // Set tanggal cek-in
            statement.setDate(2, new java.sql.Date(checkOutDate.getTime())); // Set tanggal cek-out
            statement.setString(3, "Booked");
            statement.setString(4, "Available");

            // Eksekusi kueri
            ResultSet rs = statement.executeQuery();

            // Buat model tabel
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Available Room");
            model.addColumn("Room Type");
            model.addColumn("Total Bed");
            model.addColumn("Max People");
            model.addColumn("Room Price per Night");
            model.addColumn("Select"); // Kolom tambahan untuk tombol Select


            // Memproses hasil query untuk menambahkan baris ke dalam model tabel
            while (rs.next()) {
                String roomId = rs.getString("room_id");
                String roomType = rs.getString("room_type");
                String totalBed = rs.getString("room_bed");
                String roomCapacity = rs.getString("room_capacity");
                String roomPrice = rs.getString("room_price");

                // Tambahkan baris ke dalam model tabel
                model.addRow(new Object[]{roomId, roomType, totalBed, roomCapacity, roomPrice, "Select"});
            }

            // Set model tabel
            availableRoomsTable.setModel(model);

            // Tambahkan ActionListener untuk tombol Select
            availableRoomsTable.getColumn("Select").setCellRenderer(new ButtonRenderer());
            availableRoomsTable.getColumn("Select").setCellEditor(new AvailableRoomsButtonEditor(new JCheckBox()));

            // Tutup statement dan result set
            statement.close();
            rs.close();
        } catch (SQLException e) {
            e.printStackTrace();
            // Tangani pengecualian sesuai kebutuhan Anda
            JOptionPane.showMessageDialog(null, "Gagal Memuat Kamar", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            // Menutup koneksi setelah selesai digunakan
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                // Tangani kesalahan penutupan koneksi
                e.printStackTrace();
            }
        }
    }

    // Editor untuk tombol Select
    class AvailableRoomsButtonEditor extends DefaultCellEditor {
        protected JButton button;

        private String roomId;

        public AvailableRoomsButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton();
            button.setOpaque(true);
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    // Dapatkan room_id dari baris yang diklik
                    roomId = (String) availableRoomsTable.getValueAt(availableRoomsTable.getSelectedRow(), 0);
                    // Tambahkan data ke dalam cartRoomTable
                    addToCart(roomId);
                }
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                                                     boolean isSelected, int row, int column) {
            button.setText((value == null) ? "" : value.toString());
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            return "Select";
        }

        // Method untuk menambah data ke dalam cartRoomTable
        private void addToCart(String roomId) {
            // User Loader
            String usernameLoader = new propsLoader().loadUser();
            String emailLoader = new propsLoader().loadEmail();
            
            usernameTextField.setText(usernameLoader);
            emailTextField.setText(emailLoader);
            
            // Ambil data dari availableRoomsTable berdasarkan roomId
            int selectedRow = availableRoomsTable.getSelectedRow();
            if (selectedRow != -1) { // Pastikan baris terpilih valid
                String[] rowData = new String[availableRoomsTable.getColumnCount()];
                for (int i = 0; i < availableRoomsTable.getColumnCount(); i++) {
                    rowData[i] = availableRoomsTable.getValueAt(selectedRow, i).toString();
                }

                // Buat model baru untuk cartRoomTable
                DefaultTableModel cartModel = new DefaultTableModel();
                cartModel.addColumn("Room Number");
                cartModel.addColumn("Room Type");
                cartModel.addColumn("Total Bed");
                cartModel.addColumn("Max People");
                cartModel.addColumn("Room Price per Night");
                cartRoomTable.setModel(cartModel);

                // Tambahkan data ke dalam cartRoomTable
                cartModel.addRow(rowData);

                // Tampilkan pesan konfirmasi
                JOptionPane.showMessageDialog(null, "Kamar telah ditambahkan ke dalam keranjang.", "Konfirmasi", JOptionPane.INFORMATION_MESSAGE);

                // Ambil data
                String labelText = totalNightsLabel.getText();

                // Melakukan parsing teks ke tipe data long
                long nightsTotal = Long.parseLong(labelText);
                
                // Ambil harga per malam dari data yang ditambahkan ke dalam cartRoomTable
                String roomPricePerNightText = (String) cartRoomTable.getValueAt(0, 4); // 4 adalah indeks kolom "Room Price per Night"

                // Melakukan parsing harga per malam ke tipe data double
                double roomPricePerNight = Double.parseDouble(roomPricePerNightText);

                // Hitung harga total kamar
                double totalRoomPrice = roomPricePerNight * nightsTotal;
                totalPriceLabel.setText(String.valueOf(totalRoomPrice));
                // Pindah ke TabPanel index 1
                TabPanel.setSelectedIndex(1);
            } else {
                JOptionPane.showMessageDialog(null, "Pilih kamar yang ingin ditambahkan ke dalam keranjang.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    // Renderer untuk tombol Select
    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                                                       boolean isSelected, boolean hasFocus,
                                                       int row, int column) {
            setText((value == null) ? "" : value.toString());
            return this;
        }
    }
    
    // Metode Edit Reservasi
    private void reservationEditor(){
        // Connect into database and fetching user data
        ConnectionDatabase database = new ConnectionDatabase();
        Connection conn = database.connect(); // Memanggil metode connect untuk membuat koneksi ke database
        String UserId = new propsLoader().loadUserID();
        String status = "Booked";
        
        try {
            // Query untuk mengambil informasi kamar yang sudah di Booking
            String query = "SELECT * FROM reservation r JOIN user u ON r.userid = u.userid WHERE r.userid = ? AND reservation_status = ?";

            // Persiapkan statement
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, UserId);
            statement.setString(2, status);

            // Eksekusi kueri
            ResultSet rs = statement.executeQuery();

            // Buat model tabel
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Room Number");
            model.addColumn("Check In");
            model.addColumn("Check Out");
            model.addColumn("Total Nights");
            model.addColumn("Bills");
            model.addColumn("Status");
            model.addColumn("Select"); // Kolom tambahan untuk tombol Select

            String fullname ="";
            String email ="";
            String reservationID = "";
            // Memproses hasil query untuk menambahkan baris ke dalam model tabel
            while (rs.next()) {
                String roomId = rs.getString("room_id");
                String checkIn = rs.getString("check_in");
                String checkOut = rs.getString("check_out");
                String totalNigths = rs.getString("totalNights");
                String Bills = rs.getString("reservation_bills");
                String billsStatus = rs.getString("bill_status");

                // Tambahkan baris ke dalam model tabel
                model.addRow(new Object[]{roomId, checkIn, checkOut, totalNigths, Bills, billsStatus, "Select"});
                // Simpan nama pengguna
                fullname = rs.getString("fullname");
                email = rs.getString("email");
                reservationID = rs.getString("reservation_id");
            }

            fullnameCancleTextField.setText(fullname);
            emailCancleTextField.setText(email);
            reservationIDTextField.setText(reservationID);
            // Set model tabel
            myReservationTable.setModel(model);
            
            // Tambahkan ActionListener untuk tombol "Select" pada reservationEditorTable
            myReservationTable.getColumn("Select").setCellRenderer(new ButtonRenderer());
            myReservationTable.getColumn("Select").setCellEditor(new ReservationEditorButtonEditor(new JCheckBox()));
            
            // Tutup statement dan result set
            statement.close();
            rs.close();
        } catch (SQLException e) {
            e.printStackTrace();
            // Tangani pengecualian sesuai kebutuhan Anda
            JOptionPane.showMessageDialog(null, "Gagal Memuat Kamar", "Error", JOptionPane.ERROR_MESSAGE);
        }finally {
            // Menutup koneksi setelah selesai digunakan
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                // Tangani kesalahan penutupan koneksi
                e.printStackTrace();
            }
        }
    }
    // Editor untuk tombol Select pada reservationEditorTable
    class ReservationEditorButtonEditor extends DefaultCellEditor {
        protected JButton button;

        private String roomId;
        public ReservationEditorButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton();
            button.setOpaque(true);
            // Tambahkan ActionListener untuk tombol "Select" pada reservationEditorTable
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    // Dapatkan room_id dari baris yang diklik
                    roomId = (String) myReservationTable.getValueAt(myReservationTable.getSelectedRow(), 0);
                    showRoomEditor(roomId);
                }
            });
        }
        
        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                                                     boolean isSelected, int row, int column) {
            button.setText((value == null) ? "" : value.toString());
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            return ""; // Sesuaikan dengan nilai yang dibutuhkan
        }
        
        // Method untuk menambah data ke dalam cartRoomTable
        private void showRoomEditor(String roomId) {
            // Ambil data dari myReservationTable berdasarkan roomId
            int selectedRow = myReservationTable.getSelectedRow();
            if (selectedRow != -1) { // Pastikan baris terpilih valid
                String[] rowData = new String[myReservationTable.getColumnCount()];
                for (int i = 0; i < myReservationTable.getColumnCount(); i++) {
                    rowData[i] = myReservationTable.getValueAt(selectedRow, i).toString();
                }

                // Buat model baru untuk cartRoomTable
                DefaultTableModel editorModel = new DefaultTableModel();
                editorModel.addColumn("Room Number");
                editorModel.addColumn("Check In");
                editorModel.addColumn("Check Out");
                editorModel.addColumn("Total Nigths");
                editorModel.addColumn("Bills");
                editorModel.addColumn("Status");
                reservationEditorTable.setModel(editorModel);

                // Tambahkan data ke dalam cartRoomTable
                editorModel.addRow(rowData);
                
                showRoomDetails(roomId);
                // Pindah ke TabPanel index 1
                TabPanel.setSelectedIndex(3);
            } else {
                JOptionPane.showMessageDialog(null, "Pilih kamar yang ingin di Cancle.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            }
        }
        
        private void showRoomDetails(String roomId){
            // Connect into database and fetching user data
            ConnectionDatabase database = new ConnectionDatabase();
            Connection conn = database.connect(); // Memanggil metode connect untuk membuat koneksi ke database
            try {
                // Query untuk mengambil informasi kamar yang sudah di Booking
                String query = "SELECT * FROM room WHERE room_id = ?";

                // Persiapkan statement
                PreparedStatement statement = conn.prepareStatement(query);
                statement.setString(1, roomId);

                // Eksekusi kueri
                ResultSet rs = statement.executeQuery();

                // Buat model tabel
                DefaultTableModel model = new DefaultTableModel();
                model.addColumn("Room Number");
                model.addColumn("Room Type");
                model.addColumn("Room Bed");
                model.addColumn("Room Capacity");
                model.addColumn("Room Floor");
                model.addColumn("Room Price per Night");

                // Memproses hasil query untuk menambahkan baris ke dalam model tabel
                while (rs.next()) {
                    String roomNum = rs.getString("room_id");
                    String roomType = rs.getString("room_type");
                    String roomBed = rs.getString("room_bed");
                    String roomCapacity = rs.getString("room_capacity");
                    String roomFloor = rs.getString("room_floor");
                    String roomPrice = rs.getString("room_price");

                    // Tambahkan baris ke dalam model tabel
                    model.addRow(new Object[]{roomNum, roomType, roomBed, roomCapacity, roomFloor, roomPrice});
                }

                // Set model tabel
                roomEditorTable.setModel(model);

                // Tutup statement dan result set
                statement.close();
                rs.close();
            } catch (SQLException e) {
                e.printStackTrace();
                // Tangani pengecualian sesuai kebutuhan Anda
                JOptionPane.showMessageDialog(null, "Gagal Memuat Kamar", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private boolean cancleReservation(Connection conn, String ID){
        
        // Mendapatkan tanggal hari ini
        java.util.Date today = new java.util.Date();
        String Notes = reservationNotes(conn, ID);
        
        int confirm = JOptionPane.showConfirmDialog(null, "Apakah Anda yakin ingin membatalkan reservasi ini?", "Konfirmasi Pembatalan", JOptionPane.YES_NO_OPTION);
    
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                // Query untuk check In
                String query = "UPDATE reservation SET reservation_status = ?, reservation_notes = ? WHERE reservation_id = ?";
                // Persiapkan statement
                PreparedStatement statement = conn.prepareStatement(query);
                statement.setString(1, "Canceled");
                statement.setString(2, Notes + " AND Canceled on: " + today);
                statement.setString(3, ID); // Mengatur nilai untuk parameter ketiga (reservation_id)

                // Eksekusi kueri
                int rowsUpdated = statement.executeUpdate(); // Menggunakan executeUpdate() untuk menjalankan query UPDATE
                if (rowsUpdated > 0) {
                    JOptionPane.showMessageDialog(null, "Reservasi berhasil dibatalkan pada:  " + today, "Sukses", JOptionPane.INFORMATION_MESSAGE);
                    // Kembali ke My Reservation
                    return true;
                } else {
                    JOptionPane.showMessageDialog(null, "Gagal membatalkan reservasi", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                e.printStackTrace();
                // Tangani pengecualian sesuai kebutuhan Anda
                JOptionPane.showMessageDialog(null, "Gagal membatalkan reservasi", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        return false;
    }
    
    private String reservationNotes(Connection conn, String ID){
        String checkOutNotes = "";
        try {
            // Query untuk check Out
            String query = "SELECT reservation_notes FROM reservation WHERE reservation_id = ?";
            // Persiapkan statement
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, ID);

            // Eksekusi kueri
            ResultSet rs = statement.executeQuery();

            // Periksa apakah ResultSet mengandung baris
            if (rs.next()) {
                checkOutNotes = rs.getString("reservation_notes");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Tangani pengecualian sesuai kebutuhan Anda
            JOptionPane.showMessageDialog(null, "Gagal Mengecek Check Out", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return checkOutNotes;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReservationMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReservationMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReservationMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReservationMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReservationMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel FindRoom;
    private javax.swing.JPanel History;
    private javax.swing.JPanel Menu;
    private javax.swing.JPanel MyReservation;
    private javax.swing.JPanel Profile;
    private javax.swing.JPanel ReservationEditor;
    private javax.swing.JPanel RoomCart;
    private javax.swing.JTabbedPane TabPanel;
    private javax.swing.JTable availableRoomsTable;
    private javax.swing.JButton cancleReservationButton;
    private javax.swing.JTable cartRoomTable;
    private com.toedter.calendar.JDateChooser cekInDateChooser;
    private com.toedter.calendar.JDateChooser cekOutDateChooser;
    private javax.swing.JLabel checkInDateLabel;
    private javax.swing.JLabel checkOutDateLabel;
    private javax.swing.JButton chooseOtherRoomButton;
    private javax.swing.JButton confirmBookingButton;
    private javax.swing.JTextField emailCancleTextField;
    private javax.swing.JTextField emailProfileTextField;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JButton findRoomButton;
    private javax.swing.JTextField fullnameCancleTextField;
    private javax.swing.JTextField fullnameProfileTextField;
    private javax.swing.JButton historyButton;
    private javax.swing.JTable historyTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton myReservationButton;
    private javax.swing.JTable myReservationTable;
    private javax.swing.JLabel nightsLabel;
    private javax.swing.JButton otherReservationButton;
    private javax.swing.JTextField phonenumberProfileTextField;
    private javax.swing.JButton profileButton;
    private javax.swing.JButton requestDeleteAccountButton;
    private javax.swing.JTable reservationEditorTable;
    private javax.swing.JTextField reservationIDTextField;
    private javax.swing.JButton resetPasswordButton;
    private javax.swing.JButton reshceduleButton;
    private javax.swing.JTable roomEditorTable;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel totalNightsConfirmLabel;
    private javax.swing.JLabel totalNightsLabel;
    private javax.swing.JLabel totalPriceLabel;
    private javax.swing.JButton updateProfileButton;
    private javax.swing.JLabel userHistoryLabel;
    private javax.swing.JTextField usernameProfileTextField;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
